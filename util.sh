#!/bin/bash

main() {
    # Check environment variables have values
    check_variables

    # If the command is create_table, create the table
    if [ "$1" == "create_table" ]; then
        create_table
    # If the command is drop_table, drop the table
    elif [ "$1" == "drop_table" ]; then
        drop_table
    # If the command is insert_customers, insert dummy data into the table
    elif [ "$1" == "insert_customers" ]; then
        insert_customers
    # If the command is insert_customer, validate the customer data and insert it into the table
    elif [ "$1" == "insert_customer" ]; then
        if [ -z "${4}" ]; then
            echo "ERROR: missing required values"
            echo "Usage: ./run.sh insert_customer <first_name> <last_name> <pmt_type>"
            exit 1
        fi
        insert_customer "$@"
    elif [ "$1" == "create_user" ]; then
        create_user
    elif [ "$1" == "change_user_password" ]; then
        if [ -z "${2}" ]; then
            echo "ERROR: missing required values"
            echo "Usage: ./run.sh change_user_password <new_password>"
        fi
        change_user_password "$@"
    else
        echo "ERROR: Invalid command"
        echo "Usage: ./run.sh <command>"
        echo "Commands:"
        echo "create_table"
        echo "drop_table"
        echo "insert_customers"
        echo "insert_customer <first_name> <last_name> <pmt_type>"
        echo "create_user"
        echo "change_user_password <new_password>"
        exit 1
    fi
}

# check_variables will check the environment variables are set and have values
check_variables() {
    if [ -z "${DB_HOST}" ]; then
        echo "ERROR: DB_HOST variable not set"
        exit 1
    elif [ -z "${DB_USERNAME}" ]; then
        echo "ERROR: DB_USERNAME variable not set"
        exit 1
    elif [ -z "${DB_PASSWORD}" ]; then
        echo "ERROR: DB_PASSWORD variable not set"
        exit 1
    elif [ -z "${DB_NAME}" ]; then
        echo "ERROR: DB_NAME variable not set"
        exit 1
    fi
}

# create_table will create the `customers` table in the database
create_table() {
    echo "CREATE TABLE IF NOT EXISTS customers (
        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        first_name text NOT NULL,
        last_name text NOT NULL,
        pmt_type text NOT NULL
    );" | PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USERNAME" -d "$DB_NAME"
}

# drop_table will drop the `customers` table in the database
drop_table() {
    echo "DROP TABLE IF EXISTS customers;" | PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USERNAME" -d "$DB_NAME"
}

# insert_customer will insert dummy customers into the `customers` table
insert_customers() {
    echo "INSERT INTO customers (first_name, last_name, pmt_type) VALUES 
        ('Homer', 'Simpson', 'cash'),
        ('Montgomery', 'Burns', 'credit'),
        ('Barney', 'Gumble', 'debit'),
        ('Waylon', 'Smithers', 'cash'),
        ('Ned', 'Flanders', 'credit')
    ;" | PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USERNAME" -d "$DB_NAME"
}

insert_customer() {
    echo "INSERT INTO customers (first_name, last_name, pmt_type) VALUES ('$2', '$3', '$4');" | PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USERNAME" -d "$DB_NAME"
}

create_user() {
    echo "CREATE USER apu WITH PASSWORD '$DB_PASSWORD';
        GRANT CONNECT ON DATABASE ${DB_NAME} TO apu;
        GRANT SELECT ON customers TO apu;" | PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USERNAME" -d "$DB_NAME"
}

change_user_password() {
    echo "ALTER USER apu WITH PASSWORD '$2';" | PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USERNAME" -d "$DB_NAME"
    cybr conjur set-secret -i cd/kubernetes/db/password -v "$2"
}

main "$@"